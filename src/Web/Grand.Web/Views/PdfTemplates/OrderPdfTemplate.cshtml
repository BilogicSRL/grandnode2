@using Grand.Business.Core.Interfaces.Catalog.Products
@using Grand.Business.Core.Interfaces.Checkout.GiftVouchers
@using Grand.Business.Core.Interfaces.Checkout.Payments
@using Grand.Business.Core.Interfaces.Common.Directory
@using Grand.Business.Core.Interfaces.Common.Localization
@using Grand.Business.Core.Interfaces.Common.Stores
@using Grand.Business.Core.Interfaces.Storage
@model (IList<Order>, string)
@inject IProductService _productService
@inject ICountryService _countryService
@inject IStoreService _storeService
@inject IPictureService _pictureService
@inject PdfSettings _pdfSettings
@inject ITranslationService _translationService
@inject IPaymentService _paymentService
@inject IGiftVoucherService _giftVoucherService
@{
    var logoPicture = await _pictureService.GetPictureById(_pdfSettings.LogoPictureId);
    var logoExists = logoPicture != null;
    var limitbyVendor = !string.IsNullOrEmpty(Model.Item2);
}
<!DOCTYPE HTML >
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Test</title>
</head>
<body>
        @if (!string.IsNullOrEmpty(_pdfSettings.InvoiceHeaderText))
        {
            <div>@Html.Raw(_pdfSettings.InvoiceHeaderText)</div>
        }
        <h4>dddd</h4>
</body>
</html>
